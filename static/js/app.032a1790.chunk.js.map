{"version":3,"sources":["screens/LoginScreen.js","firebase.js","screens/ChatScreen.js","screens/RegisterScreen.js","App.js","index.js"],"names":["styles","StyleSheet","create","container","flex","alignItems","padding","marginTop","button","width","LoginScreen","navigation","useState","email","setEmail","password","setPassword","View","style","placeholder","label","leftIcon","type","name","value","onChangeText","text","secureTextEntry","title","onPress","auth","getAuth","signInWithEmailAndPassword","then","userCredential","user","navigate","catch","error","alert","code","message","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","db","getFirestore","ChatScreen","messages","setMessages","signOut","useLayoutEffect","setOptions","headerLeft","maginLeft","rounded","source","uri","currentUser","photoURL","headerRight","TouchableOpacity","marginRight","size","color","Text","useEffect","q","query","collection","orderBy","onSnapshot","snapshot","docs","map","doc","_id","data","createAt","avatar","console","log","onSend","useCallback","previousMessages","GiftedChat","append","Date","setDoc","showAvatarForEveryMessage","displayName","RegisterScreen","setName","imageUrl","setImageUrl","createUserWithEmailAndPassword","errorMessage","Stack","createStackNavigator","App","NavigationContainer","Navigator","Screen","component","registerRootComponent"],"mappings":"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","file":"static/js/app.032a1790.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { View, Text, StyleSheet } from 'react-native'\r\nimport { Input, Button } from 'react-native-elements'\r\nimport { getAuth, signInWithEmailAndPassword } from \"firebase/auth\";\r\n\r\n\r\n\r\nconst LoginScreen = ({navigation}) =>{\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    //Sign in an existing user\r\n    const signIn = () => {\r\n        const auth = getAuth();\r\n        signInWithEmailAndPassword(auth, email, password)\r\n        .then((userCredential) => {\r\n            // Signed in \r\n            const user = userCredential.user;\r\n            //console.log(user);\r\n\r\n            //Load chat if login succesfull\r\n            navigation.navigate('Chat')\r\n        })\r\n        .catch((error) => {\r\n            alert(error.code,\": \", error.message);\r\n        });\r\n    }    \r\n\r\n\r\n    return(\r\n        <View style={styles.container}>\r\n            <Input placeholder='Enter your email' \r\n                label='Email' \r\n                leftIcon={{type: 'material', name:'email'}} \r\n                value={email} \r\n                onChangeText={text => setEmail(text)}/>\r\n\r\n            <Input placeholder='Enter your password' \r\n                label='Password' \r\n                leftIcon={{type: 'material', name:'lock'}} \r\n                value={password} \r\n                onChangeText={text => setPassword(text)} \r\n                secureTextEntry />\r\n\r\n            <Button title='login' style={styles.button} onPress={signIn}/>\r\n            <Button title='register' style={styles.button} onPress={() => navigation.navigate('Register')}/>\r\n        </View>\r\n    )\r\n}\r\n\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n    container:{\r\n        flex: 1,\r\n        alignItems: 'center',\r\n        padding: 10,\r\n        marginTop: 100,\r\n    },\r\n    button:{\r\n        width: 370,\r\n        marginTop: 10\r\n    }\r\n})\r\n\r\nexport default LoginScreen\r\n\r\n","// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getAuth } from \"firebase/auth\";\r\nimport { getFirestore } from \"firebase/firestore\";\r\n\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBAY8jBtwWqdDXM3ipu3ZEXSJDfqpbCS0A\",\r\n  authDomain: \"my-chat-app-6219f.firebaseapp.com\",\r\n  projectId: \"my-chat-app-6219f\",\r\n  storageBucket: \"my-chat-app-6219f.appspot.com\",\r\n  messagingSenderId: \"324296332419\",\r\n  appId: \"1:324296332419:web:157a1a87ce0f0ed7acb7b6\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\n\r\n\r\n\r\n//Exports\r\nconst db = getFirestore(app);\r\nconst auth = getAuth(app);\r\nexport { db, auth };","import React, { useCallback, useEffect, useLayoutEffect, useState } from \"react\";\r\nimport { View, Text, StyleSheet, TouchableOpacity } from 'react-native';\r\nimport { Avatar } from 'react-native-elements';\r\nimport { db } from '../firebase';\r\nimport { GiftedChat } from 'react-native-gifted-chat';\r\nimport { getAuth } from \"firebase/auth\";\r\nimport { doc, onSnapshot, setDoc, collection, orderBy, query } from \"firebase/firestore\";\r\n\r\n\r\nconst auth = getAuth();\r\n\r\nconst ChatScreen = ({navigation}) =>{\r\n    \r\n    const [messages, setMessages] = useState([]);\r\n\r\n    //Logout action\r\n    const signOut = () =>{\r\n        auth.signOut().then(() =>{\r\n            //Sign-out Succesful\r\n            navigation.navigate(\"Login\");\r\n        }).catch((error) =>{\r\n            //An error happened\r\n            alert(error)\r\n        });\r\n    }\r\n\r\n    //Layout definition and Logout button\r\n    useLayoutEffect(()=>{\r\n        navigation.setOptions({\r\n            headerLeft: () =>(\r\n                <View style={{ maginLeft: 20 }}>\r\n                    <Avatar rounded source={{uri: auth.currentUser?.photoURL,}}/>\r\n                </View>\r\n            ),\r\n            headerRight: () =>(\r\n                <TouchableOpacity style={{ marginRight: 10, size:24, color:'black'}} name='logout' onPress={signOut}>\r\n                        <Text>Logout</Text>\r\n                </TouchableOpacity>\r\n            )\r\n        })\r\n    },[navigation]);\r\n\r\n    //Default message\r\n    useEffect(() => {\r\n      /*  setDoc(doc(collection(db, \"chats\")),{\r\n            _id: 1,\r\n            text: 'Hello',\r\n            createAt: new Date(),\r\n            user: {\r\n                _id: 2,\r\n                name: 'React Native',\r\n                avatar: 'https://placeimg.com/140/140/any',\r\n            },\r\n        });*/\r\n    }, [])\r\n  \r\n    //Load previous chat messages\r\n    useLayoutEffect(() => {\r\n\r\n        const q = query(collection(db, \"chats\"), orderBy(\"createAt\", \"desc\"));\r\n\r\n        const unsubscribe = onSnapshot(q,\r\n            (snapshot)=>{\r\n                const chats = [];\r\n                setMessages( snapshot.docs.map(doc=>({\r\n                    _id: doc.data()._id,\r\n                    createAt: doc.data().createAt,\r\n                    text: doc.data().text,\r\n                    user: doc.data().user,\r\n                    avatar: doc.data().user.avatar}))\r\n                )\r\n            },\r\n            (error)=>{\r\n                alert(\"Error, app could not retreived any messages.\");\r\n                console.log(error.code,\": \", error.message);\r\n            })\r\n\r\n        \r\n        return unsubscribe;\r\n    })\r\n\r\n    //Post messages to database\r\n    const onSend = useCallback((messages =[]) =>{\r\n        setMessages(previousMessages => GiftedChat.append(previousMessages, messages))\r\n\r\n        const { _id, createAt = new Date(), text, user,} = messages[0];\r\n\r\n        setDoc(doc(collection(db, \"chats\")), {_id, createAt, text, user});\r\n\r\n    }, [])\r\n\r\n    return(\r\n        <GiftedChat messages={messages} \r\n            showAvatarForEveryMessage={true} \r\n            onSend={messages => onSend(messages)} \r\n            user={{\r\n                _id: auth?.currentUser?.email,\r\n                name: auth?.currentUser?.displayName,\r\n                avatar: auth?.currentUser?.photoURL\r\n            }} />\r\n    );\r\n    \r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n});\r\n\r\nexport default ChatScreen\r\n","import React, { useState } from 'react'\r\nimport {View, StyleSheet} from 'react-native'\r\nimport { Input, Button } from 'react-native-elements';\r\nimport { getAuth, createUserWithEmailAndPassword } from \"firebase/auth\";\r\n\r\n\r\nconst RegisterScreen = ({navigation}) =>{\r\n    const [name, setName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [imageUrl, setImageUrl] = useState('');\r\n\r\n    const register = () =>{\r\n        const auth = getAuth();\r\n        createUserWithEmailAndPassword(auth, email, password)\r\n        .then((userCredential) =>{\r\n            //Signed in\r\n            const user = userCredential.user;\r\n            //console.log(user);\r\n\r\n            //Load chat when register is succesful\r\n            navigation.navigate('Chat');\r\n        })\r\n        .catch((error) =>{\r\n            var errorMessage = error.message;\r\n            alert(errorMessage)\r\n        });        \r\n    }\r\n\r\n    return(\r\n        <View style={styles.container}>\r\n            <Input placeholder='Enter your name' label='Name' leftIcon={{type:'material', name:'badge'}} value={name} onChangeText={text => setName(text)}/>\r\n            <Input placeholder='Enter your email' label='Email' leftIcon={{type:'material', name:'email'}} value={email} onChangeText={text => setEmail(text)}/>\r\n            <Input placeholder='Enter your password' label='Password' leftIcon={{type:'material', name:'lock'}} value={password} onChangeText={text => setPassword(text)} secureTextEntry/>\r\n            <Input placeholder='Enter your avatar url' label='Profile Picture' leftIcon={{type:'material', name:'face'}} value={imageUrl} onChangeText={text => setImageUrl(text)}/>\r\n            \r\n            <Button title='register' style={styles.button} onPress={register}/>\r\n        </View>\r\n    )\r\n}\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n    container:{\r\n        flex: 1,\r\n        alignItems: 'center',\r\n        padding: 10,\r\n        marginTop: 100,\r\n    },\r\n    button:{\r\n        width: 370,\r\n        marginTop: 10\r\n    }\r\n})\r\n\r\n\r\nexport default RegisterScreen\r\n","import React from 'react';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { NavigationContainer } from '@react-navigation/native';\nimport LoginScreen from './screens/LoginScreen';\nimport ChatScreen from './screens/ChatScreen';\nimport RegisterScreen from './screens/RegisterScreen';\n\nconst Stack = createStackNavigator()\n\nconst App =() => {\n  return(\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen name=\"Login\" component={LoginScreen}/>\n        <Stack.Screen name=\"Register\" component={RegisterScreen}/>\n        <Stack.Screen name=\"Chat\" component={ChatScreen}/>\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n};\n\n//const styles = StyleSheet.create({ });\n\n\nexport default App;\n","import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n"],"sourceRoot":""}